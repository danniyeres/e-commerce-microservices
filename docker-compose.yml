version: '3.8'
services:

  # Gateway Service
  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "8080:8080"
    depends_on:
      - eureka-server
    networks:
      microservices-network:

  # Eureka Server
  eureka-server:
    build: ./eureka-server
    container_name: eureka-server
    ports:
      - "8761:8761"
    networks:
      microservices-network:

  # User Service
  user-service:
    build: ./user-service
    container_name: user-service
    ports:
      - "8081:8081"
    environment:
      DATABASE_HOST: users-db
      DATABASE_PORT: 5432
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres
    depends_on:
      - eureka-server
      - users-db
    networks:
      microservices-network:

  # Product Service
  product-service:
    build: ./product-service
    container_name: product-service
    ports:
      - "8082:8082"
    environment:
      DATABASE_HOST: products-db
      DATABASE_PORT: 5432
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres
    depends_on:
      - eureka-server
      - products-db
    networks:
      microservices-network:

  # Cart Service
  cart-service:
    build: ./cart-service
    container_name: cart-service
    ports:
      - "8083:8083"
    environment:
      DATABASE_HOST: cart-db
      DATABASE_PORT: 5432
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres
    depends_on:
      - eureka-server
      - cart-db
    networks:
      microservices-network:

  # Order Service
  order-service:
    build: ./order-service
    container_name: order-service
    ports:
      - "8084:8084"
    environment:
      DATABASE_HOST: orders-db
      DATABASE_PORT: 5432
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres
    depends_on:
      - eureka-server
      - orders-db
    networks:
      microservices-network:

  # Payment Service
  payment-service:
    build: ./payment-service
    container_name: payment-service
    ports:
      - "8085:8085"
    environment:
      DATABASE_HOST: payments-db
      DATABASE_PORT: 5432
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres
    depends_on:
      - eureka-server
      - payments-db
    networks:
      microservices-network:

  # PostgreSQL Databases
  users-db:
    image: postgres:17
    container_name: users-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: users
    ports:
      - "5432:5432"
    networks:
      microservices-network:

  products-db:
    image: postgres:17
    container_name: products-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: products
    ports:
      - "5433:5432"
    networks:
      microservices-network:

  cart-db:
    image: postgres:17
    container_name: cart-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: cart
    ports:
      - "5434:5432"
    networks:
      microservices-network:

  orders-db:
    image: postgres:17
    container_name: orders-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: orders
    ports:
      - "5435:5432"
    networks:
      microservices-network:

  payments-db:
    image: postgres:17
    container_name: payments-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: payments
    ports:
      - "5436:5432"
    networks:
      microservices-network:

  # Kafka and Zookeeper
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
    depends_on:
      - zookeeper
    networks:
      microservices-network:


  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ALLOW_ANONYMOUS_LOGIN: yes
    networks:
      microservices-network:

networks:
  microservices-network:
    driver: bridge

volumes:
  kafka-data:


